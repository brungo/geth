# the part selection and associated pin choices (if any) are intended as 
# an example for the family selected.  Please refer to the User Guide
# for more information about IO selection.
CONFIG PART = xc6vcx75tff784-1;


#
####
#######
##########
#############
#################
#EXAMPLE DESIGN CONSTRAINTS

############################################################
# Clock Period Constraints                                 #
############################################################


############################################################
# RX Clock period Constraints                              #
############################################################
# Receiver clock period constraints: please do not relax
NET "gmii_rx_clk"                TNM_NET  = "clk_rx";
TIMESPEC "TS_rx_clk"       = PERIOD "clk_rx" 8000 ps HIGH 50 %;




############################################################
# TX Clock period Constraints                              #
############################################################
# Transmitter clock period constraints: please do not relax
NET "gtx_clk*"                   TNM_NET  = "clk_gtx";
TIMESPEC "TS_gtx_clk"      = PERIOD "clk_gtx" 8000 ps HIGH 50 %;



NET "*/tx_gmii_clk*"              TNM_NET  = "clk_tx_gmii";
TIMESPEC "TS_tx_clk_gmii"  = PERIOD "clk_tx_gmii" 8000 ps HIGH 50 %;



############################################################
# Host Clock period Constraint                             #
############################################################
# Management Clock period constraints: relax as required
NET "host_clk"                   TNM_NET  = "host";
TIMESPEC "TS_host_clk"     = PERIOD "host" 10000 ps HIGH 50 % PRIORITY 10;

############################################################
# IDELAYCTRL reference clock period Constraint             #
############################################################
NET "refclk_bufg"               TNM_NET  = "clk_ref_clk";
TIMESPEC "TS_ref_clk"      = PERIOD "clk_ref_clk" 5000 ps HIGH 50 %;



############################################################
# NOTE: The transmitter and receiver statistic vectors are #
# routed to IOB's in this design example only to enable    #
# them to be viewed from the demonstration testbench. In a #
# real design it is expected that they will either be left #
# unconnected or used internally within the FPGA to        #
# generate further statistical counters.                   #
############################################################

INST *rx_statistics_valid                                         IOB = true;
INST *rx_statistics_vector                                        IOB = true;
INST *tx_statistics_valid                                         IOB = true;
INST *tx_statistics_vector                                        IOB = true;



############################################################
# NOTE: The host_addr inputs are routed to IOB's in this   #
# design example, rather than being registered on host_clk #
# within the FPGA. The following constraint ensures that   #
# the setup to host_clk is less than the host_clk period.  #
############################################################
NET "host_addr<*>"                                                TNM = "HOST_IO";
NET "host_wr_data<*>"                                             TNM = "HOST_IO";
NET "host_opcode<*>"                                              TNM = "HOST_IO";
NET "host_req"                                                    TNM = "HOST_IO";
NET "host_miim_sel"                                               TNM = "HOST_IO";
TIMEGRP "HOST_IO"        OFFSET=IN 9900 ps BEFORE "host_clk";

# the Host inputs are registered before being used
# We do NOT want these registers to be placed in IOBs as 
# this artificially skews the timing and is not 
# representative of a real system
INST "*host_addr_reg*"                                            IOB=FALSE;
INST "*host_wr_data_reg*"                                         IOB=FALSE;
INST "*host_opcode_reg*"                                          IOB=FALSE;
INST "*host_req_int"                                              IOB=FALSE;
INST "*host_miim_sel_int"                                         IOB=FALSE;

############################################################
# NOTE: The async reset is first captured with an async    #
# reset synch to ensure it is maintained for a minimum     #
# duration - paths from this are TIG as it will always be  #
# locally synced
############################################################

INST "*x_reset_gen?reset_sync2"                                   TNM = "REF_RESET";
TIMESPEC "TS_ref_reset"   = FROM "REF_RESET" TIG;






#
####
#######
##########
#############
#################
#LOCAL LINK CONSTRAINTS

############################################################
# FIFO Clock Crossing Constraints                          #
############################################################
## TX Client FIFO
# Group the clock crossing signals into timing groups
INST "*client_side_FIFO/tx_fifo_i/rd_tran_frame_tog"              TNM = "tx_fifo_rd_to_wr";
INST "*client_side_FIFO/tx_fifo_i/rd_addr_txfer*"                 TNM = "tx_fifo_rd_to_wr";
INST "*client_side_FIFO/tx_fifo_i/rd_txfer_tog"                   TNM = "tx_fifo_rd_to_wr";
INST "*client_side_FIFO/tx_fifo_i/rd_retran_frame_tog"            TNM = "tx_fifo_rd_to_wr";
INST "*client_side_FIFO/tx_fifo_i/rd_col_window_pipe_1"           TNM = "tx_fifo_rd_to_wr";

INST "*client_side_FIFO/tx_fifo_i/wr_frame_in_fifo"               TNM = "tx_fifo_wr_to_rd";

TIMESPEC "TS_tx_fifo_rd_to_wr"   = FROM "tx_fifo_rd_to_wr" TO clk_tx_gmii 7800 ps DATAPATHONLY;
TIMESPEC "TS_tx_fifo_wr_to_rd"   = FROM "tx_fifo_wr_to_rd" TO clk_tx_gmii 7800 ps DATAPATHONLY;

# Reduce clock period to allow for metastability settling time
INST "*client_side_FIFO/tx_fifo_i/wr_col_window_pipe_0"           TNM = "tx_metastable";
TIMESPEC "ts_tx_meta_protect"    = FROM "tx_metastable" 5 ns;

# constrain the input to this register - this is a multicycle path due to the
# resync of the control
INST "*client_side_FIFO/tx_fifo_i/rd_addr_txfer*"                 TNM = "tx_addr_rd";
INST "*client_side_FIFO/tx_fifo_i/wr_rd_addr*"                    TNM = "tx_addr_wr";

TIMESPEC "TS_tx_fifo_addr"       = FROM "tx_addr_rd" TO "tx_addr_wr" 10ns;


## RX Client FIFO
# Group the clock crossing signals into timing groups
INST "*client_side_FIFO/rx_fifo_i/wr_store_frame_tog"             TNM = "rx_fifo_wr_to_rd";
INST "*client_side_FIFO/rx_fifo_i/rd_addr*"                       TNM = "rx_fifo_rd_to_wr";

TIMESPEC "TS_rx_fifo_wr_to_rd"   = FROM "rx_fifo_wr_to_rd" TO clk_tx_gmii 7800 ps DATAPATHONLY;
TIMESPEC "TS_rx_fifo_rd_to_wr"   = FROM "rx_fifo_rd_to_wr" TO "clk_rx" 7800 ps DATAPATHONLY;




#
####
#######
##########
#############
#################
#BLOCK CONSTRAINTS

############################################################
# External GMII Constraints                                #
############################################################

# GMII Transmitter Constraints:  place flip-flops in IOB
INST "*trimac_block*gmii_interface*gmii_txd*"                     IOB = true;
INST "*trimac_block*gmii_interface*gmii_tx_en"                    IOB = true;
INST "*trimac_block*gmii_interface*gmii_tx_er"                    IOB = true;

# GMII Receiver Constraints:  place flip-flops in IOB
INST "*trimac_block*gmii_interface*rxd_to_mac*"                   IOB = true;
INST "*trimac_block*gmii_interface*rx_dv_to_mac"                  IOB = true;
INST "*trimac_block*gmii_interface*rx_er_to_mac"                  IOB = true;




############################################################
# The following are required to maximise setup/hold        #
############################################################

INST "gmii_txd<?>"                                                SLEW = FAST;
INST "gmii_tx_en"                                                 SLEW = FAST;
INST "gmii_tx_er"                                                 SLEW = FAST;
INST "gmii_tx_clk"                                                SLEW = FAST;






############################################################
# GMII: IODELAY Constraints
############################################################
# Please modify the value of the IDELAY_VALUE
# according to your design.
# For more information on IDELAYCTRL and IODELAY, please
# refer to the Virtex-6 User Guide.
#
INST "*trimac_block*gmii_interface*delay_gmii_rx_dv"              IDELAY_VALUE = 22;
INST "*trimac_block*gmii_interface*delay_gmii_rx_er"              IDELAY_VALUE = 22;
INST "*trimac_block*gmii_interface*delay_gmii_rxd"                IDELAY_VALUE = 22;


# Group IODELAY and IDELAYCTRL components to aid placement
INST "*trimac_block*gmii_interface*delay_gmii_rx_dv"              IODELAY_GROUP = "grp1";
INST "*trimac_block*gmii_interface*delay_gmii_rx_er"              IODELAY_GROUP = "grp1";
INST "*trimac_block*gmii_interface*delay_gmii_rxd"                IODELAY_GROUP = "grp1";
INST "*trimac_block*dlyctrl"                                      IODELAY_GROUP = "grp1";

# example LOC on the input pins
INST "gmii_rx_clk"                                                LOC = "BANK14";
INST "gmii_rx_dv"                                                 LOC = "BANK14";
INST "gmii_rx_er"                                                 LOC = "BANK14";
INST "gmii_rxd<?>"                                                LOC = "BANK14";











############################################################
# For Setup and Hold time analysis on GMII inputs          #
############################################################

# Identify GMII Rx Pads only.  
# This prevents setup/hold analysis being performed on false inputs,
# eg, the configuration_vector inputs.
INST "gmii_rxd<?>"                                                TNM = IN_GMII; 
INST "gmii_rx_er"                                                 TNM = IN_GMII;
INST "gmii_rx_dv"                                                 TNM = IN_GMII;

# The following constraints work in conjunction with IDELAY_VALUE settings to
# check that the GMII receive bus remains in alignment with the rising edge of
# GMII_RX_CLK, to within 2.2ns setup time and 200ps hold time. In addition to
# adjusting IDELAY_VALUE settings for your system's timing characteristics, you
# may wish to refine these constraints to match the GMII specification
 
TIMEGRP "IN_GMII" OFFSET         = IN  2.2 ns VALID 2.4 ns BEFORE "gmii_rx_clk"; 



#
####
#######
##########
#############
#################
#CORE CONSTRAINTS



############################################################
# Crossing of Clock Domain Constraints: please do not edit #
############################################################
# Flow Control logic reclocking - control sugnal is synchronised
INST "*trimac_core*FLOW?RX_PAUSE?PAUSE_REQ_TO_TX"                 TNM="flow_rx_to_tx";
INST "*trimac_core*FLOW?RX_PAUSE?PAUSE_VALUE_TO_TX*"              TNM="flow_rx_to_tx";
TIMESPEC "TS_flow_rx_to_tx"      = FROM "flow_rx_to_tx" TO clk_tx_gmii 7800 ps DATAPATHONLY;

# generate a group of all flops NOT in the host clock domain
TIMEGRP "ffs_except_host"        = FFS EXCEPT "host" "mdio_logic";

# Configuration Register reclocking
INST "*trimac_core*MANIFGEN?MANAGEN?CONF?RX0_OUT*"                TNM="async_config";
INST "*trimac_core*MANIFGEN?MANAGEN?CONF?RX1_OUT*"                TNM="async_config";
INST "*trimac_core*MANIFGEN?MANAGEN?CONF?FC_OUT_29"               TNM="async_config";

INST "*trimac_core*MANIFGEN?MANAGEN?CONF?TX_OUT*"                 TNM="async_config";
INST "*trimac_core*MANIFGEN?MANAGEN?CONF?FC_OUT_30"               TNM="async_config";

# speed change config
INST "*trimac_core*MANIFGEN?MANAGEN?CONF?CNFG_SPEED*"             TNM="async_config";
INST "*trimac_core*SPEED_IS*"                                     TNM="async_config";

TIMESPEC "TS_host_clk_to_rx_clk" = FROM "host" TO "clk_rx"      TIG;
TIMESPEC "TS_host_clk_to_tx_clk" = FROM "host" TO clk_tx_gmii TIG;

TIMESPEC "TS_config_to_all"      = FROM "async_config" TO "ffs_except_host" TIG;




############################################################
# Ignore paths to resync flops
############################################################
INST "*/data_sync"                                                TNM = "resync_reg";
TIMESPEC "ts_resync_flops"       = TO "resync_reg" TIG;

INST "*trimac_core*TXGEN*INT_CRS"                                 TNM = "tx_async_reg";
INST "*trimac_core*TXGEN*REG_COL"                                 TNM = "tx_async_reg";
INST "*trimac_core*GMII_MII_TX_GEN*COL_REG1"                      TNM = "tx_async_reg";

# following two can be ignored as signal being captured is stable for multiple cycles
# in cases where it is used
INST "*trimac_core*TXGEN*REG_TX_EN_IN"                            TNM = "tx_async_reg";
INST "*trimac_core*TXGEN*REG_TX_ER_IN"                            TNM = "tx_async_reg";
TIMESPEC "ts_tx_async_regs"      = TO "tx_async_reg" TIG;



######################################################################
# MDIO Constraints: please do not edit unless TS_host_clk is relaxed #
# in which case the multiplier needs to be adjusted to give the      #
# required 400ns (or faster)                                         #
######################################################################

# Place the MDIO logic in it's own timing groups
INST "*trimac_core*MANIFGEN?MANAGEN?PHY?ENABLE_REG"    TNM = "mdio_logic";
INST "*trimac_core*MANIFGEN?MANAGEN?PHY?READY_INT"     TNM = "mdio_logic";
INST "*trimac_core*MANIFGEN?MANAGEN?PHY?STATE_COUNT*"  TNM = FFS "mdio_logic";
INST "*trimac_core*MANIFGEN?MANAGEN?PHY?MDIO_TRISTATE" TNM = "mdio_logic";
INST "*trimac_core*MANIFGEN?MANAGEN?PHY?MDIO_OUT"      TNM = "mdio_logic";

# The MDIO logic is constrained to a 400ns period.  this is generated by relating the required
# period to that specified for host_clk.  This ensures the two clocks are related timed
# correctly.
TIMESPEC "TS_mdio"              = PERIOD "mdio_logic" "TS_host_clk" * 40 PRIORITY 0;





#
####
#######
##########
#############
#################
#


# want to TIG any timing paths to the select of the TX clock BUFGMUXs as this is always an async path
PIN "*clock_inst*BUFGMUX*.I?"          TNM="clk_bufgmux";
TIMESPEC "TS_bufgmux"            = FROM "async_config" TO "clk_bufgmux" TIG;







